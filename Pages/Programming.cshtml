@page
@model ProgrammingModel
@{
ViewData["Title"] = "ProgrammingModel Skills";
}
<div class="container hero-section-bis">
   <div class="row">
      <div class="text-center">
         <h1>My Programming Journey</h1>
         <p>AS a passionate and experienced .NET developer with a strong background in building and deploying robust backend applications. Over the course of more than 2 years in the industry, I have honed my skills in various technologies and methodologies, enabling me to contribute effectively to complex projects and deliver high-quality solutions.</p>
      </div>
   </div>
   <div class="row">
      <div class="text-center">
         <h1>Technologies</h1>
         <h3>Technical Expertise</h3>
         <p>My expertise spans across a spectrum of technologies and tools:</p>
         <ul>
            <li><i class="fa-brands fa-csharp technology"></i> <strong class="technology">C# (.NET):</strong> Proficient in developing scalable applications using C# and .NET framework.</li>
            <li><i class="fa-brands fa-windows technology"></i> <strong class="technology">WPF:</strong> Skilled in creating rich desktop applications with WPF.</li>
            <li><i class="fa-solid fa-database technology"></i> <strong class="technology">Entity Framework:</strong> Experienced in database interaction and ORM using Entity Framework.</li>
            <li><i class="fa-solid fa-database technology"></i> <strong class="technology">SQL:</strong> Proficient in database design, querying, and optimization using SQL.</li>
            <li><i class="fa-brands fa-git-alt technology"></i> <strong class="technology">Git:</strong> Proficient in version control and collaborative development workflows using Git.</li>
            <li><i class="fa-solid fa-diagram-project technology"></i> <strong class="technology">CI/CD Practices:</strong> Experienced in Continuous Integration and Continuous Deployment practices.</li>
            <li><i class="fa-brands fa-html5 technology"></i> <strong class="technology">HTML/CSS:</strong> Familiar with front-end technologies for creating user interfaces.</li>
            <li><i class="fa-brands fa-vuejs technology"></i> <strong class="technology">Vue.js:</strong> Knowledgeable in developing dynamic web applications using Vue.js.</li>
            <li><i class="fa-brands fa-jira technology"></i> <strong class="technology">Agile/Scrum:</strong> Experienced in Agile practices for efficient project management.</li>
         </ul>
         <div class="row">
            <div class="col-md-12">
               <p>I'm always learning and experimenting. If you have a project in mind, or just want to connect <a asp-page="/Contact"> let's connect!</a> also feel free to <a href="~/docs/CV - Oreste BO+(EN).pdf" download="CV Oreste TWIZEYIMANA">Download my CV</a> to learn more about my experience and skills.</p>
            </div>
            <h1>Featured Projects</h1>
         </div>
      </div>
   </div>
   <div class="row">
      <div class="col-sm-6 skill-box">
          <h1><a href="https://github.com/stere8/RTTrackers">RT Trackers</a></h1>
         <p>The <code>stere8/rttrackers</code> repository is a Flask-based web application designed for tracking stock prices and weather conditions. Here&apos;s a summary of its key components and functionalities:</p>
         <h2>Core Functionalities</h2>
         <ul>
            <li><strong>Stock Tracking</strong>: Utilizes two classes, <code>StockTracker</code> and <code>StockTracker2</code>, to fetch current stock prices from different APIs (Alpha Vantage and possibly IEX Cloud). These classes are defined in <code>stock_trackers.py</code> and <code>stock_trackers2.py</code>.</li>
            <li><strong>Weather Tracking</strong>: The <code>WeatherTracker</code> class in <code>weather_tracker.py</code> fetches current weather data, including humidity, pressure, wind speed, and temperature, using the OpenWeatherMap API.</li>
         </ul>
         <h2>Web Application Structure</h2>
         <ul>
            <li><strong>Flask App</strong>: The main application logic is contained in <code>app.py</code>, which defines routes for different functionalities such as displaying the homepage, tracking selected stocks, selecting stocks, selecting regions for weather tracking, and tracking weather conditions in selected regions.</li>
            <li><strong>HTML Templates</strong>: The <code>templates</code> directory contains HTML files (<code>index.html</code>, <code>selectstocks.html</code>, <code>stocktracker.html</code>, and others) for rendering the web pages. These templates use Bootstrap and jQuery for styling and functionality.</li>
            <li><strong>Stock Representation</strong>: The <code>Stock</code> class in <code>Stock.py</code> represents a stock with attributes like name, ticker, and last price.</li>
         </ul>
         <h3>Configuration and Management</h3>
         <ul>
            <li><strong>.gitignore</strong>: Specifies files and directories that Git should ignore, including build results, user-specific files, and other non-source code files.</li>
            <li><strong>.gitattributes</strong>: Configures Git settings for handling line endings, diffing certain file types, and managing merge behaviors for specific file types.</li>
         </ul>
         <p>This project combines financial data tracking with weather condition monitoring in a single web application, showcasing the integration of external APIs and the use of Flask for web development.</p>
         <h2>Enhancements to Stock Tracking</h2>
         <ul>
            <li><strong>Real-time Updates</strong>: Implement WebSocket or AJAX polling to provide real-time updates of stock prices without needing to refresh the page.</li>
            <li><strong>Expanded API Integration</strong>: Integrate more financial data APIs to provide a broader range of stock market data, including international markets.</li>
            <li><strong>User Customization</strong>: Allow users to save their stock selections and view them upon returning to the site, possibly through user accounts or local storage.</li>
         </ul>
         <h2>Enhancements to Weather Tracking</h2>
         <ul>
            <li><strong>Extended Forecast</strong>: Incorporate a 5-day or 10-day weather forecast feature in addition to the current weather conditions.</li>
            <li><strong>Geolocation Support</strong>: Automatically detect the user&apos;s location to display local weather information without manual region selection.</li>
            <li><strong>Weather Alerts</strong>: Implement weather alerts or warnings based on severe weather conditions in the selected regions.</li>
         </ul>
         <h1>UI/UX Improvements</h1>
         <ul>
            <li><strong>Responsive Design</strong>: Ensure the web application is fully responsive and provides an optimal viewing experience across all devices.</li>
            <li><strong>Interactive Charts</strong>: Integrate interactive charts for stock price history and weather patterns using libraries like Chart.js or D3.js.</li>
            <li><strong>Theme Customization</strong>: Offer theme customization options for users, such as light mode and dark mode.</li>
         </ul>
      </div>
      <div class="col-sm-6 skill-box">
            <h1><a href="https://github.com/stere8/dreamndine">DreamNDine</a></h1>
            <p>The  <code>stere8/dreamndine</code> This comprehensive web application aims to revolutionize property management and dining experiences. Built with .NET 8.0 and a layered architecture, it includes a user-friendly web application, robust backend API, and a business logic layer for seamless operation.</p>
         <h2>Core Functionalities</h2>
         <ul>
            <li><strong>Property Management</strong>:Users can browse, book, and manage vacation rental properties. Features include property listings, detailed descriptions, reservation calendars, and secure booking functionality.</li>
            <li><strong>Dining Experience</strong>: The application integrates with local dining experiences. This could include restaurant recommendations near properties, the ability to book dining reservations, or explore curated food-related activities related to the region.</li>
         </ul>
         <h2>Web Application Structure</h2>
         <ul>
            <li>
               <p><strong>Backend API (DreamNDine.API)</strong>: The heart of the system, providing RESTful APIs for property data, bookings, user profiles, and potentially dining information</p>
            </li>
            <li>
               <p><strong>Client Application (DreamNDine.Client)</strong>: The user-facing interface built with Razor Pages. Handles property display, search filters, booking processes, user account management, and leverages Bootstrap for styling</p>
            </li>
            <li>
               <p><strong>Database and Entity Framework</strong>: The project utilizes Entity Framework for ORM, with SQL Server as the database backend, facilitating data management for properties, bookings, and users.</p>
            </li>
         </ul>
         <h2>Configuration and Management</h2>
         <ul>
            <li>
               <p><strong>Project Structure</strong>: Separates the API, client-side, and business logic into distinct projects for improved maintainability and code clarity</p>
            </li>
            <li>
               <p><strong>Authentication and Authorization</strong>: ncludes features for user registration, login, and role-based access control to ensure data security.</p>
            </li>
            <li>
               <p><strong>Swagger Integration</strong>: The API project is configured with Swagger to provide interactive documentation for the backend services.</p>
            </li>
         </ul>
         <h1>Key Technologies</h1>
         <ul>
            <li>.NET 8.0 for backend and client development.</li>
            <li>Entity Framework for streamlined database interaction.</li>
            <li>Bootstrap for responsive UI design.</li>
            <li>AutoMapper to simplify object mapping.</li>
         </ul>
         <h2>Suggestions for Improvement</h2>
         <p>I'm eager to implement a comprehensive set of enhancements to DreamNDine, focusing on several key areas:</p>
         <ul>
            <li>
               <strong><strong>Security:</strong></strong>
               <ul>
                  <li>Reinforce password protection for optimal user data security.</li>
                  <li>Implement rate limiting to safeguard against brute-force attacks.</li>
               </ul>
            </li>
            <li>
               <strong><strong>Performance:</strong></strong>
               <ul>
                  <li>Optimize database interactions for faster, more efficient data retrieval.</li>
                  <li>Introduce unit testing to ensure code quality and maintainability.</li>
               </ul>
            </li>
            <li>
               <strong><strong>User Experience:</strong></strong>
               <ul>
                  <li>Improve error handling to provide informative feedback to users.</li>
                  <li>Enhance logging for better debugging and monitoring capabilities.</li>
               </ul>
            </li>
            <li>
               <strong><strong>Compliance:</strong></strong>
               <ul>
                  <li>Prioritize adherence to data privacy regulations (e.g., GDPR, CCPA)</li>
               </ul>
            </li>
         </ul>
      </div>
      <div class="row">
         <div class="col-sm-6 skill-box">
                <h1><a href="https://github.com/stere8/soulsscriblesandsounds ">Souls Scribles and Sounds</a></h1>
            <p>The <code>stere8/soulsscriblesandsounds</code> repository is a creative project that combines various elements of digital art, including music, writing, and visual art. Here&apos;s a summary of its key components and functionalities:</p>
            <h1>Core Functionalities</h1>
            <ul>
               <li><strong>Music Composition and Sharing</strong>: This component involves the creation, storage, and sharing of music tracks. It might utilize audio files, MIDI data, or links to streaming platforms.</li>
               <li><strong>Writing and Blogging</strong>: A section dedicated to written content, possibly including poems, stories, and blog posts. This could be implemented through static pages or a content management system.</li>
               <li><strong>Visual Art Display</strong>: A gallery or portfolio showcasing visual art pieces, such as digital paintings, photographs, or graphic designs.</li>
            </ul>
            <h1>Web Application Structure</h1>
            <ul>
               <li><strong>Flask App</strong>: If it&apos;s a web-based project, the main application logic could be contained in <code>app.py</code>, defining routes for different functionalities such as displaying the homepage, music library, blog posts, and art gallery.</li>
               <li><strong>HTML Templates</strong>: The <code>templates</code> directory might contain HTML files (<code>index.html</code>, <code>music.html</code>, <code>blog.html</code>, <code>gallery.html</code>, etc.) for rendering the web pages, using Bootstrap and jQuery for styling and functionality.</li>
               <li><strong>Static Files</strong>: A <code>static</code> directory for storing static content such as images, CSS files, JavaScript files, and audio files.</li>
            </ul>
            <h1>Content Representation</h1>
            <ul>
               <li><strong>Music Track</strong>: A class or data structure representing a music track with attributes like title, artist, duration, and file path or URL.</li>
               <li><strong>Blog Post</strong>: A class or data structure for blog posts, including attributes such as title, author, date, and content.</li>
               <li><strong>Art Piece</strong>: A class or data structure representing an art piece, with details like title, artist, medium, and image file path or URL.</li>
            </ul>
            <h1>Configuration and Management</h1>
            <ul>
               <li><strong>.gitignore</strong>: Specifies files and directories that Git should ignore, including build results, user-specific files, and other non-source code files.</li>
               <li><strong>.gitattributes</strong>: Configures Git settings for handling line endings, diffing certain file types, and managing merge behaviors for specific file types.</li>
            </ul>
            <p><strong><strong>Security:</strong></strong></p>
            <ul>
               <li>Strengthen password protection and implement rate limiting to prevent unauthorized access.</li>
               <li>Enhance input validation to block malicious data.</li>
            </ul>
            <p><strong><strong>Performance:</strong></strong></p>
            <ul>
               <li>Optimize database interactions and introduce unit testing for efficiency and reliability.</li>
            </ul>
            <p><strong><strong>User Experience:</strong></strong></p>
            <ul>
               <li>Provide informative API feedback, especially for registration errors.</li>
            </ul>
            <p><strong><strong>Functionality &amp; Compliance</strong></strong></p>
            <ul>
               <li>Implement flexible role management, logging for debugging, and ensure compliance with data privacy regulations.</li>
            </ul>
         </div>
         <div class="col-sm-6 skill-box">
            <h1>Python Explorations</h1>
            <p>This collection of beginner-friendly Python projects was a fantastic starting point for developing my core programming skills.  They include an acronym generator, a script to neatly format a personal biography, and classic interactive games like "Guess the Number" and "Mad Libs." I also experimented with simple programs for checking odd/even numbers and playing the classic game "Rock, Paper, Scissors."</p>
            <p><strong>Key Skills Practiced:</strong>
            <ul>
               <li>Variables and data types</li>
               <li>Basic control flow (if/else)</li>
               <li>User input and output</li>
               <li>Functions and modularity</li>
               <li>File handling (for the biography formatter)</li>
            </ul>
            </p>
            <ul>
               <li><strong>Improvements:</strong> I could add depth to these projects with complex logic, file saving options, and basic graphical user interfaces (GUIs) using a library like Tkinter. These additions would make them more practical and user-friendly tools.</li>
            </ul>
            <h1>Cross-Platform Todo App</h1>
            <p> This React Native project was my foray into mobile development, with a focus on creating a functional todo app for both iOS and Android devices. It strengthened my cross-platform development skills and exposed me to the intricacies of mobile UI design. </p>
            <p><strong>Key Skills Practiced:</strong>
            <ul>
               <li>React and React Native component-based UI</li>
               <li>Cross-platform layout and styling</li>
               <li>Mobile device interactions (touch, gestures)</li>
               <li>Data storage (local or cloud-based)</li>
            </ul>
            </p>
            <ul>
               <li><strong>Improvements:</strong> I could modernize this app with cloud-based data storage to sync tasks seamlessly across devices. Adding recurring tasks, reminders, and updating the UI to reflect current design trends would create an even better user experience. </li>
            </ul>
            <h1>Robust User Authentication System</h1>
            <p> This comprehensive project demonstrates my ability to design secure and scalable authentication systems for web applications. It features a modern Blazor WebAssembly client and a .NET web server managing registration, login, and token-based authentication processes, showcasing my understanding of web security principles.  </p>
            <p><strong>Key Skills Practiced:</strong>
            <ul>
               <li>.NET backend development</li>
               <li>Blazor WebAssembly for the frontend</li>
               <li>Secure password storage (hashing, salting)</li>
               <li>Token generation and management</li>
               <li>UI design for login, registration, etc.</li>
            </ul>
            </p>
            <ul>
               <li><strong>Improvements:</strong> I could enhance this system with password strength checks, two-factor authentication, and social login integration (Google, Facebook, etc.). Further refinement of the UI and adding password reset features would create a smoother and more comprehensive user experience.</li>
            </ul>
         </div>
      </div>
   </div>
</div>